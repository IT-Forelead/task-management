openapi: 3.0.0
info:
  description: "This is a sample help to grow server."
  version: 1.0.2
  title: Help to Grow
  termsOfService: http://scala.uz
  contact:
    email: admin@scala.uz
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: auth
  - name: tasks
  - name: assets
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Access token
      description: "Login post for authentication"
      operationId: authLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
        description: login and password for authentication
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "422":
          description: invalid json params
        "403":
          description: Incorrect Login or password
  /auth/logout:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - auth
      summary: Logs out current logged in user session
      description: "Logout"
      operationId: logoutUser
      responses:
        "204":
          description: successful operation
        "403":
          description: Bearer token not found
  /tasks:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: all tasks in our system
      description: "Fetch tasks"
      operationId: getTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskFilters"
        description: filters
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Task"
        "403":
          description: Bearer token not found
  /tasks/counts:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: counts of all tasks in our system
      description: "Fetch count of tasks"
      operationId: getCounts
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Counts"
        "403":
          description: Bearer token not found
  /tasks/counts/{userId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: counts of user assigned tasks in our system
      description: "Fetch count of tasks assigned to user"
      operationId: getCountsByUser
      parameters:
        - name: userId
          in: path
          description: 'The id of user'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Counts"
        "403":
          description: Bearer token not found
  /tasks/create:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: create task
      description: "Create task"
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
        description: task params for create
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "422":
          description: invalid json params
        "403":
          description: Bearer token not found
  /tasks/{taskId}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: assign task to users
      description: "assign task to users"
      operationId: assignTask
      parameters:
        - name: taskId
          in: path
          description: 'The id of task'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskAssignInput"
        description: assign task to users
        required: true
      responses:
        "202":
          description: successful operation
        "400":
          description: wrong operation
        "422":
          description: invalid json params
        "403":
          description: Bearer token not found
  /tasks/edit/{taskId}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: update task
      description: "update task"
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          description: 'The id of task'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdateInput"
        description: task params for update
        required: true
      responses:
        "202":
          description: successful operation
        "422":
          description: invalid json params
        "403":
          description: Bearer token not found
  /tasks/comments:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: add comment to task
      description: "add comment to task"
      operationId: addTaskComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
        description: comment input for add comment to task
        required: true
      responses:
        "201":
          description: successful operation
        "400":
          description: bad request data
        "422":
          description: invalid json params
        "403":
          description: Bearer token not found
  /tasks/comments/{taskId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: get task comments
      description: "fetch comments of task"
      operationId: fetchTaskComments
      parameters:
        - name: taskId
          in: path
          description: 'The id of task'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Comment"
        "403":
          description: Bearer token not found
  /tasks/action-histories/{taskId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - tasks
      summary: get task action histories
      description: "fetch action histories of task"
      operationId: fetchActionHistories
      parameters:
        - name: taskId
          in: path
          description: 'The id of task'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ActionHistory"
        "403":
          description: Bearer token not found
  /assets:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - assets
      summary: upload file to system
      description: "Upload file"
      operationId: uploadAsset
      requestBody:
        content:
          multipart/form-data: # Media type
            schema: # Request payload
              $ref: "#/components/schemas/AssetInput"
        description: form data for upload file. Allowed media types doc, docx, pdf, png, jpeg
        required: true
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "400":
          description: File part not exists!
        "403":
          description: Bearer token not found
        "422":
          description: Invalid form data entered
  /assets/{assetId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - assets
      summary: get task action histories
      description: "fetch action histories of task"
      operationId: fetchAsset
      parameters:
        - name: assetId
          in: path
          description: 'The id of asset'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetInfo"
        "403":
          description: Bearer token not found
  /users:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - users
      description: "Fetch users by users filter"
      operationId: fetchUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserFilters"
        description: User filters for fetch
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "403":
          description: Bearer token not found
        "422":
          description: invalid json entered
  /users/create:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - users
      description: "Create User"
      operationId: createUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
        description: User data for create
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "403":
          description: Bearer token not found
        "422":
          description: invalid json entered
servers:
  - url: http://localhost:8000
  - url: http://utg-urgench.iflead.uz/api/v1
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    #
  schemas:
    Login:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          type: string
          example: "+998901234567"
        password:
          type: string
          example: "Secret1!"
    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    TaskFilters:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        status:
          type: string
          example: in_progress
          enum:
            - new
            - in_progress
            - complete
            - on_hold
            - rejected
            - approved
            - expired
        dueDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        assigned:
          type: boolean
    Task:
      type: object
      required:
        - taskId
        - createdAt
        - title
        - dueDate
        - status
        - description
        - executors
        - controllers
      properties:
        taskId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        title:
          type: string
        assetId:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date
        status:
          type: string
          example: in_progress
          enum:
            - new
            - in_progress
            - complete
            - on_hold
            - rejected
            - approved
            - expired
        description:
          type: string
        executors:
          type: array
          items:
            type: string
        controllers:
          type: array
          items:
            type: string
    TaskUpdateInput:
      type: object
      required:
        - title
        - dueDate
        - status
        - description
      properties:
        title:
          type: string
        assetId:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date
        status:
          type: string
          example: in_progress
          enum:
            - new
            - in_progress
            - complete
            - on_hold
            - rejected
            - approved
            - expired
        description:
          type: string
    TaskInput:
      type: object
      required:
        - title
        - dueDate
        - description
      properties:
        title:
          type: string
        assetId:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date
        description:
          type: string
        assigned:
          type: "array"
          items:
            type: string
            format: uuid
    Counts:
      type: object
      required:
        - count
        - new
        - inProgress
        - completed
        - onHold
        - rejected
        - approved
        - expired
      properties:
        count:
          type: integer
          format: int32
        new:
          type: integer
          format: int32
        inProgress:
          type: integer
          format: int32
        completed:
          type: integer
          format: int32
        onHold:
          type: integer
          format: int32
        rejected:
          type: integer
          format: int32
        approved:
          type: integer
          format: int32
        expired:
          type: integer
          format: int32
    CommentInput:
      type: object
      required:
        - taskId
        - note
      properties:
        taskId:
          type: string
          format: uuid
        note:
          type: string
        assetId:
          type: string
          format: uuid
    Comment:
      type: object
      required:
        - taskId
        - note
        - createdAt
        - userId
      properties:
        taskId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        note:
          type: string
        userId:
          type: string
          format: uuid
        assetId:
          type: string
          format: uuid
    ActionHistory:
      type: object
      required:
        - taskId
        - createdAt
        - action
        - description
        - userId
      properties:
        taskId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        action:
          type: string
          example: assignment
          enum:
            - assignment
            - change_status
            - note
        description:
          type: string
        userId:
          type: string
          format: uuid
    Asset:
      type: object
      required:
        - id
        - createdAt
        - s3Key
        - public
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        s3Key:
          type: string
        public:
          type: boolean
        fileName:
          type: string
    AssetInput:
      type: object
      required:
        - public
        - file
      properties:
        public:
          type: boolean
        filename:
          type: string
        file:
          type: string
          format: binary
    AssetInfo:
      type: object
      required:
        - public
        - file
      properties:
        public:
          type: boolean
        filename:
          type: string
        url:
          type: string
          format: url
    User:
      type: object
      required:
        - id
        - createdAt
        - firstname
        - lastname
        - role
        - phone
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        firstname:
          type: string
        lastname:
          type: string
        role:
          type: string
          example: creator
          enum:
            - admin
            - creator
            - executor
            - controller
        phone:
          type: string
    UserFilters:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roles:
          type: array
          items:
            type: string
            enum:
              - admin
              - creator
              - executor
              - controller
        employment:
          type: string
          example: employed
          enum:
            - employed
            - unemployed
    UserInput:
      type: object
      required:
        - firstname
        - lastname
        - phone
      properties:
        phone:
          type: string
        firstname:
          type: string
        lastname:
          type: string
    TaskAssignInput:
      type: object
      required:
        - userIds
      properties:
        userIds:
          type: "array"
          items:
            type: string
            format: uuid